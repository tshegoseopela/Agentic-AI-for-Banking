services:
########################
# Orchestrate Lite dependencies
########################
  wxo-server-redis:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/redis:7.2
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - wxo-server-redis-data:/data
    command: redis-server --loglevel warning

  wxo-server-db:
    image: ${DB_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-server-db:${DBTAG:-latest}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d postgres
      interval: 5s
      timeout: 60s
      retries: 20
    volumes:
      - wxo-server-db:/var/lib/postgresql/data
      - wxo-applied-migrations:/var/lib/postgresql/applied_migrations
    command: -c shared_preload_libraries=pgsodium

  wxo-server-connection-manager:
    image: ${CM_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-connections:${CM_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@wxo-server-db:5432/postgres
      DB_NAME: ${DB_NAME:-postgres}
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASSWORD:-postgres}
      DB_HOST: wxo-server-db
      DB_PORT: ${DB_PORT:-5432}
      DB_ENCRYPTION_KEY: abc
      WXO_SERVER_URL: http://wxo-server:4321
      MAX_POOL: 60
      DEPLOYMENT_MODE: laptop
      SUFFIXLIST: '["global_05d7ba72", "ibm_184bdbd3"]'
    ports:
      - 3001:3001

  ai-gateway:
    image: ${AI_GATEWAY_REGISTRY:-us.icr.io/watson-orchestrate-private}/ai-gateway:${AI_GATEWAY_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "8787:8787"
    environment:  
      WATSONX_API_KEY: ${WATSONX_APIKEY}
      WATSONX_URL: ${WATSONX_URL}
      WATSONX_SPACE_ID: ${WATSONX_SPACE_ID}

  wxo-agent-gateway:
    image: ${AGENT_GATEWAY_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-agent-gateway:${AGENT_GATEWAY_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "8989:8989"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      DEPLOYMENT_PLATFORM: laptop-lite

  ui:
    image: ${UI_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-chat:${UITAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_WEB_CHAT_ENVIRONMENT: local
      REACT_APP_TENANT_ID: ${REACT_APP_TENANT_ID}
      VCAP_APP_PORT: 4002
      REACT_APP_ENVIRONMENT: local
      DEPLOYMENT_ENVIRONMENT: local
      UI_APP_CONTEXT_ROOT: /mfe_home
      DE_CLIENT_HEAP_SIZE: 1024
      NODE_LOG_LEVEL: debug
      RABBITMQ_EXCHANGE: verdi_events_affinity
      SOCKET_PING_TIMEOUT: 20000
      WXO_DOMAIN_URL: http://localhost:4321
      IS_WXA_WEBCHAT: "true"
      NODE_OPTIONS: --max-http-header-size 32768
      PATH: /opt/app-root/src/node_modules/.bin/:/opt/app-root/src/.npm-global/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      TERM: xterm
      PLATFORM: el8
      MAX_FILE_UPLOAD_SIZE_BYTES: 20971520
      MAX_FILE_UPLOAD_SIZE_BYTES_EXCEL: 1048576
      VCAP_APP_HOST: localhost
      DEPLOYMENT_PLATFORM: laptop
      CONNECTION_MANAGER_URL: http://localhost:3001
      DISMISS_NOTIFICATION_TIMEOUT: 10000
      STANDALONE: "true"
      STREAM_TIMEOUT: ${STREAM_TIMEOUT:-120000}
    command: "./StartServer.sh"
    ports:
      - "3000:4002"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    volumes:
      - ui-data:/data

  wxo-builder:
    image: ${BUILDER_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-builder:${BUILDER_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    environment:
      WXO_DEPLOYMENT_TYPE: 'laptop'
      AGENT_RUNTIME_ENDPOINT: http://wxo-server:4321
      TEMPUS_RUNTIME_ENDPOINT: http://wxo-tempus-runtime:9044
      CONNECTIONS_MANAGER_ENDPOINT: http://wxo-server-connection-manager:3001
    command: 'npm start'
    ports:
      - '4025:4025'
    healthcheck:
      test: curl -k http://localhost:4025/api/health --fail
      interval: 5s
      timeout: 60s
      retries: 5

  wxo-server-minio:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/minio/minio:latest
    platform: linux/amd64
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      timeout: 20s
      retries: 10
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
    command: server --console-address ":9001" /data
    volumes:
      - wxo-server-minio-data:/data

  wxo-server-minio-setup:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/minio/mc:latest
    platform: linux/amd64
    depends_on:
      wxo-server-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set wxo-server-minio http://wxo-server-minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-watsonxorchestrate};
      /usr/bin/mc mb wxo-server-minio/wxo-server-storage-bucket;
      /usr/bin/mc mb wxo-server-minio/langfuse;
      exit 0;
      "
      
  wxo-milvus-standalone:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/milvusdb/milvus:v2.5.6
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: wxo-milvus-etcd:2379
      MINIO_ADDRESS: wxo-server-minio:9000
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
    volumes:
      - wxo-milvus-data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "wxo-milvus-etcd"
      - "wxo-server-minio"

  wxo-milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - wxo-milvus-etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  socket-handler:
    image: ${SOCKET_HANDLER_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-socket-handler:${SOCKET_HANDLER_TAG:-latest}
    platform: linux/amd64
    command: "npm start"
    ports:
      - 4001:4001
    environment:
      - PORT=4001
      - REDIS_URL=redis://wxo-server-redis:6379/0
    depends_on:
      - wxo-server-redis

  wxo-server:
    image: ${SERVER_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-server-server:${SERVER_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - 4321:4321
      - 4322:4322
    volumes:
      - ./sdk:/packages
      - tools:/tools
    
    command: >
       bash -c '
          export PYTHONPATH="/tmp/monkey:$PYTHONPATH"
          mkdir -p /tmp/monkey &&

          echo -e "from uvicorn.supervisors.multiprocess import Process\n_original_is_alive = Process.is_alive\ndef patched_is_alive(self, timeout: float = 30):\n    return _original_is_alive(self, timeout=30)\nProcess.is_alive = patched_is_alive" > /tmp/monkey/sitecustomize.py &&

          uvicorn --host 0.0.0.0 --port 4321 --log-config /app/config/logs/log_conf.yaml --log-level debug --workers 5 wo_archer.api.main:app &

          for i in {1..40}; do curl --silent --fail http://127.0.0.1:4321/health/alive && echo "[INFO] HTTP Service ready" && break || echo "[INFO] Waiting for HTTP service..." && sleep 10; done;
          curl --silent --fail http://127.0.0.1:4321/health/alive || (echo "[ERROR] HTTP service failed to start" && exit 1);

          wait
        '
    depends_on:
      wxo-server-redis:
          condition: service_started
      wxo-server-db:
          condition: service_started
      wxo-server-worker:
          condition: service_started
      langfuse-worker:
          condition: service_started
          required: False
    environment:
      RUNTIME_MANAGER_API_KEY: ${RUNTIME_MANAGER_API_KEY:-testapikey} 
      PIP_NO_CACHE_DIR:
      JWT_SECRET: ${JWT_SECRET}
      TRM_BASE_URL: http://tools-runtime-manager:8080
      POSTGRES_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@wxo-server-db:5432/postgres
      # POSTGRES_POOL_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@wxo-server-db:6432/postgres
      CELERY_BROKER_URL: redis://wxo-server-redis:6379/0
      AGENT_GATEWAY_URI: http://wxo-agent-gateway:8989
      CELERY_RESULT_BACKEND: redis://wxo-server-redis:6379/0
      FLOWER_URL: http://wxo-server-flower:5555
      DB_ENCRYPTION_KEY: thisisthedbencryptionkeyforlocaltestingonly
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET:-wxo-server-storage-bucket}  # name of s3 bucket where you want to store objects
      STORAGE_S3_ENDPOINT: http://wxo-server-minio:9000
      STORAGE_S3_FORCE_PATH_STYLE: 'true'
      STORAGE_S3_REGION: us-east-1
      EVENT_BROKER_URL: redis://wxo-server-redis:6379/0
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
      ASSISTANT_LLM_MODEL_ID: ${ASSISTANT_LLM_MODEL_ID:-watsonx/ibm/granite-3-8b-instruct}
      ASSISTANT_LLM_API_KEY: ${ASSISTANT_LLM_API_KEY}
      ASSISTANT_LLM_API_BASE: ${ASSISTANT_LLM_API_BASE:-https://us-south.ml.cloud.ibm.com}
      ASSISTANT_LLM_SPACE_ID : ${ASSISTANT_LLM_SPACE_ID}
      BAM_API_KEY: ${BAM_API_KEY}
      WXAI_API_KEY: ${WXAI_API_KEY}
      ROUTING_LLM_MODEL_ID: ${ROUTING_LLM_MODEL_ID:-watsonx/ibm/granite-8b-unified-api-model-v2}
      ROUTING_LLM_API_KEY: ${ROUTING_LLM_API_KEY}
      ROUTING_LLM_API_BASE: ${ROUTING_LLM_API_BASE:-https://us-south.ml.cloud.ibm.com}
      ROUTING_LLM_SPACE_ID : ${ROUTING_LLM_SPACE_ID}
      ASSISTANT_EMBEDDINGS_MODEL_ID: ${ASSISTANT_EMBEDDINGS_MODEL_ID:-watsonx/ibm/slate-125m-english-rtrvr-v2}
      ASSISTANT_EMBEDDINGS_API_KEY: ${ASSISTANT_EMBEDDINGS_API_KEY}
      ASSISTANT_EMBEDDINGS_API_BASE: ${ASSISTANT_EMBEDDINGS_API_BASE:-https://us-south.ml.cloud.ibm.com}
      ASSISTANT_EMBEDDINGS_SPACE_ID: ${ASSISTANT_EMBEDDINGS_SPACE_ID}
      ASSISTANT_INDEX_CHUNK_SIZE: 400
      ASSISTANT_INDEX_CHUNK_OVERLAP: 50
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGFUSE_HOST: ${LANGFUSE_HOST:-http://host.docker.internal:3010}
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-pk-lf-7417757e-d6df-421b-957e-683b76acb5df}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_PRIVATE_KEY:-sk-lf-7bc4da63-7b2b-40c0-b5eb-1e0cf64f9af2}
      NLTK_DATA: /tmp/nltk_data
      DO_NOT_TRACK: true
      TELEMETRY_ENABLED: false
      BASE_URL: https://de-server.apps.wo-dp-006.l7c7.p1.openshiftapps.com/
      AGENT_STEP_DETAILS: redis://wxo-server-redis:6379/0
      JWT_PRIVATE_CONFIGS_PATH: "/"
      VECTOR_STORE_PROVIDER: ${VECTOR_STORE_PROVIDER:-milvus}
      CELERY_RESULTS_TTL: "3600"
      EVENT_BROKER_TTL: "-1"
      TAVILY_API_KEY: ${TAVILY_API_KEY:-dummy_tavily_api_key}
      WATSONX_APIKEY: ${WATSONX_APIKEY}
      WATSONX_URL: ${WATSONX_URL}
      WATSONX_SPACE_ID: ${WATSONX_SPACE_ID}
      CALLER_ID: 12345
      AGENTIC_FLOW_ENABLED: ${AGENTIC_FLOW_ENABLED}
      CELERY_WORKER_POOL: ${CELERY_WORKER_POOL}
      IS_WXO_LITE: 'TRUE'
      OAUTH_REDIRECT_URL: https://localhost:4322/api/v1/connections/callback
      ENABLE_WEBHOOKS: false
      DISABLE_JSON_LOG_CELERY: true
      WXO_DEPLOYMENT_PLATFORM: saas
      CONNECTION_MANAGER_URL: http://wxo-server-connection-manager:3001
      CHANNEL_SESSION_REDIS_URL: redis://wxo-server-redis:6379/5
      WXO_MILVUS_URI: http://wxo-milvus-standalone:19530
      MILVUS_DB_NAME: default
      MILVUS_USERNAME: root
      MILVUS_PASSWORD: Milvus
      WO_API_KEY: ${WO_API_KEY}
      WO_USERNAME: ${WO_USERNAME}
      WO_PASSWORD: ${WO_PASSWORD}
      WO_INSTANCE: ${WO_INSTANCE}
      USE_SAAS_ML_TOOLS_RUNTIME: ${USE_SAAS_ML_TOOLS_RUNTIME}
      AUTHORIZATION_URL: ${AUTHORIZATION_URL}
      WO_AUTH_TYPE: ${WO_AUTH_TYPE}
      AI_GATEWAY_BASE_URL: ${AI_GATEWAY_BASE_URL}
      AI_GATEWAY_ENABLED : ${AI_GATEWAY_ENABLED}


  wxo-server-worker:
    image: ${WORKER_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-server-conversation_controller:${WORKER_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      wxo-server-redis:
          condition: service_started
      wxo-server-db:
          condition: service_started
      langfuse-worker:
          condition: service_started
          required: False
    volumes:
      - ./sdk:/packages
      - tools:/tools
    environment:
      RUNTIME_MANAGER_API_KEY: ${RUNTIME_MANAGER_API_KEY:-testapikey} 
      AI_GATEWAY_ENABLED : ${AI_GATEWAY_ENABLED}
      AI_GATEWAY_BASE_URL: ${AI_GATEWAY_BASE_URL}
      IS_WXO_LITE: 'TRUE'
      TRM_BASE_URL: http://tools-runtime-manager:8080
      AGENT_STEP_DETAILS: redis://wxo-server-redis:6379/0
      AGENT_GATEWAY_URI: http://wxo-agent-gateway:8989
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@wxo-server-db:5432/postgres
      CELERY_BROKER_URL: redis://wxo-server-redis:6379/0
      CELERY_RESULT_BACKEND: redis://wxo-server-redis:6379/0
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET:-wxo-server-storage-bucket}  # name of s3 bucket where you want to store objects
      STORAGE_S3_ENDPOINT: http://wxo-server-minio:9000
      STORAGE_S3_FORCE_PATH_STYLE: 'true'
      STORAGE_S3_REGION: us-east-1
      EVENT_BROKER_URL: redis://wxo-server-redis:6379/0
      DB_ENCRYPTION_KEY: thisisthedbencryptionkeyforlocaltestingonly
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
      ASSISTANT_LLM_MODEL_ID: ${ASSISTANT_LLM_MODEL_ID:-watsonx/ibm/granite-3-8b-instruct}
      ASSISTANT_LLM_API_KEY: ${ASSISTANT_LLM_API_KEY}
      ASSISTANT_LLM_API_BASE: ${ASSISTANT_LLM_API_BASE:-https://us-south.ml.cloud.ibm.com}
      ASSISTANT_LLM_SPACE_ID : ${ASSISTANT_LLM_SPACE_ID}
      ROUTING_LLM_MODEL_ID: ${ROUTING_LLM_MODEL_ID:-watsonx/ibm/granite-8b-unified-api-model-v2}
      ROUTING_LLM_API_KEY: ${ROUTING_LLM_API_KEY}
      ROUTING_LLM_API_BASE: ${ROUTING_LLM_API_BASE:-https://us-south.ml.cloud.ibm.com}
      ROUTING_LLM_SPACE_ID : ${ROUTING_LLM_SPACE_ID}
      ASSISTANT_EMBEDDINGS_MODEL_ID: ${ASSISTANT_EMBEDDINGS_MODEL_ID:-watsonx/ibm/slate-125m-english-rtrvr-v2}
      ASSISTANT_EMBEDDINGS_API_KEY: ${ASSISTANT_EMBEDDINGS_API_KEY}
      ASSISTANT_EMBEDDINGS_API_BASE: ${ASSISTANT_EMBEDDINGS_API_BASE:-https://us-south.ml.cloud.ibm.com}
      ASSISTANT_EMBEDDINGS_SPACE_ID: ${ASSISTANT_EMBEDDINGS_SPACE_ID}
      ASSISTANT_INDEX_CHUNK_SIZE: 400
      ASSISTANT_INDEX_CHUNK_OVERLAP: 50
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGFUSE_HOST: ${LANGFUSE_HOST:-http://host.docker.internal:3010}
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-pk-lf-7417757e-d6df-421b-957e-683b76acb5df}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_PRIVATE_KEY:-sk-lf-7bc4da63-7b2b-40c0-b5eb-1e0cf64f9af2}
      NLTK_DATA: /tmp/nltk_data
      DO_NOT_TRACK: true
      TELEMETRY_ENABLED: false
      BASE_URL: https://de-server.apps.wo-dp-006.l7c7.p1.openshiftapps.com/
      SERVER_TYPE: CELERY
      BAM_API_KEY: ${BAM_API_KEY}
      WXAI_API_KEY: ${WXAI_API_KEY}
      VECTOR_STORE_PROVIDER: ${VECTOR_STORE_PROVIDER:-milvus}
      CELERY_RESULTS_TTL: "3600"
      EVENT_BROKER_TTL: "-1"
      TAVILY_API_KEY: ${TAVILY_API_KEY:-dummy_tavily_api_key}
      WATSONX_APIKEY: ${WATSONX_APIKEY}
      WATSONX_URL: ${WATSONX_URL}
      WATSONX_SPACE_ID: ${WATSONX_SPACE_ID}
      CALLER_ID: 12345
      AGENTIC_FLOW_ENABLED: ${AGENTIC_FLOW_ENABLED}
      CELERY_WORKER_POOL: ${CELERY_WORKER_POOL}
      OAUTH_REDIRECT_URL: https://localhost:4322/api/v1/connections/callback
      ENABLE_WEBHOOKS: false
      DISABLE_JSON_LOG_CELERY: true
      CONNECTION_MANAGER_URL: http://wxo-server-connection-manager:3001
      CHANNEL_SESSION_REDIS_URL: redis://wxo-server-redis:6379/5
      WXO_MILVUS_URI: http://wxo-milvus-standalone:19530
      MILVUS_DB_NAME: default
      MILVUS_USERNAME: root
      MILVUS_PASSWORD: Milvus
      WO_API_KEY: ${WO_API_KEY}
      WO_USERNAME: ${WO_USERNAME}
      WO_PASSWORD: ${WO_PASSWORD}
      WO_INSTANCE: ${WO_INSTANCE}
      USE_SAAS_ML_TOOLS_RUNTIME: ${USE_SAAS_ML_TOOLS_RUNTIME}
      AUTHORIZATION_URL: ${AUTHORIZATION_URL}
      WO_AUTH_TYPE: ${WO_AUTH_TYPE}
      WXO_DEPLOYMENT_PLATFORM: saas
      CALLBACK_HOST_URL: http://wxo-server:4321
  
  tools-runtime-manager:
    image: ${TRM_REGISTRY:-us.icr.io/watson-orchestrate-private}/tools-runtime-manager:${TRM_TAG:-latest}
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      wxo-server-db:
        condition: service_healthy  # Ensures DB is ready before starting
    volumes:
      - $HOME/.kube/config:/root/.kube/config
      - tools-runtime-data:/shared-data
    environment:
      RUNTIME_MANAGER_API_KEY: ${RUNTIME_MANAGER_API_KEY:-testapikey} 
      KUBECONFIG: /root/.kube/config
      K8S_SERVER: "https://lima-rancher-desktop:6443"  # Kubernetes API on host
      DB_HOST: wxo-server-db
      DB_PORT: ${DB_PORT:-5432}  # Ensure default port
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-postgres}
      DB_SSLMODE: ${DB_SSLMODE:-disable}  # Disable SSL if not configured
      DB_CONN_LIFE: ${DB_CONN_LIFE}
      DB_MAX_IDLE_CONN: ${DB_MAX_IDLE_CONN}
      DB_MAX_CONN: ${DB_MAX_CONN}
      SERVER_PORT: ${SERVER_PORT}
      SERVER_HOST: ${SERVER_HOST}
      SCHEMA_FILE_PATH: ${SCHEMA_FILE_PATH}
      WXO_BASE_URL: ${WXO_BASE_URL}
      NAMESPACE: ${NAMESPACE}
      DEPLOYMENT_PLATFORM: ${DEPLOYMENT_PLATFORM}
      VOLUME_MOUNT_PATH: "/shared-data"
      TOOLS_RUNTIME_MANAGER_BASE_URL: ${TOOLS_RUNTIME_MANAGER_BASE_URL}
      CONNECTION_SERVICE_BASE_URL: http://wxo-server-connection-manager:3001
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET:-wxo-server-storage-bucket}  
      STORAGE_S3_ENDPOINT: http://wxo-server-minio:9000
      STORAGE_S3_FORCE_PATH_STYLE: 'true'
      STORAGE_S3_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
      TEMPUS_HOST_NAME: http://wxo-tempus-runtime:9044
    extra_hosts:
      - "host.docker.internal:host-gateway"

  tools-runtime:
    image: ${TR_REGISTRY:-us.icr.io/watson-orchestrate-private}/tools-runtime:${TR_TAG:-latest}
    platform: linux/amd64
    ports:
      - "8000:8000"
    restart: unless-stopped
    depends_on:
      - wxo-server-db
    volumes:
      - $HOME/.kube/config:/root/.kube/config
      - tools-runtime-data:/shared-data
    environment:
      DEPLOYMENT_PLATFORM: ${DEPLOYMENT_PLATFORM}
      VOLUME_MOUNT_PATH: "/shared-data"
      RUNTIME_MANAGER_API_KEY: ${RUNTIME_MANAGER_API_KEY:-testapikey} 
      TOOLS_RUNTIME_MANAGER_BASE_URL: ${TOOLS_RUNTIME_MANAGER_BASE_URL}
      DB_HOST: wxo-server-db
      DB_PORT: ${DB_PORT:-5432}  # Ensure default port
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-postgres}
      DB_SSLMODE: ${DB_SSLMODE:-disable}  # Disable SSL if not configured
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET:-wxo-server-storage-bucket}  
      STORAGE_S3_ENDPOINT: http://wxo-server-minio:9000
      STORAGE_S3_FORCE_PATH_STYLE: 'true'
      STORAGE_S3_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}

########################
# LANGFUSE dependencies
########################
  langfuse-worker:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/langfuse/langfuse-worker:3
    restart: unless-stopped
    profiles: [langfuse]
    depends_on: &langfuse-depends-on
      wxo-server-db:
        condition: service_healthy
      wxo-server-minio:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "3030:3030"
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@wxo-server-db:5432/langfuse
      SHADOW_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@wxo-server-db:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "4cb5c10dfb35f77a50e871c4607bd199396725244b0f99caee33d329de6862f9" # generate via `openssl rand -hex 32`
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${LANGFUSE_CLICKHOUSE_MIGRATION_URL:-clickhouse://langfuse-clickhouse:9000}
      CLICKHOUSE_URL: ${LANGFUSE_CLICKHOUSE_URL:-http://langfuse-clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${STORAGE_S3_ENDPOINT:-http://wxo-server-minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${STORAGE_S3_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-watsonxorchestrate}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${STORAGE_S3_ENDPOINT:-http://wxo-server-minio:9000}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${STORAGE_S3_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      LANGFUSE_INIT_ORG_ID: ibm
      LANGFUSE_INIT_ORG_NAME: IBM
      LANGFUSE_INIT_PROJECT_ID: orchestrate-lite
      LANGFUSE_INIT_PROJECT_NAME: Watsonx Orchestrate Lite Project
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_EMAIL:-orchestrate@ibm.com}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_USERNAME:-orchestrate}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_PASSWORD:-orchestrate}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-pk-lf-7417757e-d6df-421b-957e-683b76acb5df}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_PRIVATE_KEY:-sk-lf-7bc4da63-7b2b-40c0-b5eb-1e0cf64f9af2}
      REDIS_CONNECTION_STRING: redis://wxo-server-redis:6379/1

  langfuse-web:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/langfuse/langfuse:3
    restart: unless-stopped
    depends_on: *langfuse-depends-on
    profiles: [langfuse]
    ports:
      - "3010:3000"
    environment:
      <<: *langfuse-worker-env
      # NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_URL: http://localhost:3010
      NEXTAUTH_SECRET: mysecret

  langfuse-clickhouse:
    image: ${OPENSOURCE_REGISTRY_PROXY:-docker.io}/clickhouse/clickhouse-server:latest
    restart: unless-stopped
    user: "101:101"
    profiles: [langfuse]
    container_name: clickhouse
    hostname: clickhouse
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - "8123:8123"
      - "9002:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s




  wxo-tempus-runtime:
    image: ${FLOW_RUMTIME_REGISTRY:-us.icr.io/watson-orchestrate-private}/wxo-tempus-runtime:${FLOW_RUNTIME_TAG:-latest}
    restart: unless-stopped
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      SERVER_MODE: production
      SERVER_ENVIRONMENT: SDK
      SERVER_HTTP_PORT: "9044"
      SERVER_CONTEXT_PATH:
      SERVER_JWK_URL: https://wo-ibm-dev.verify.ibm.com/v1.0/endpoint/default/jwks
      SERVER_STANDALONE_TASK_CALLBACK_URL: http://localhost:9044/task/callback/{thread_id}/{requestId}
      SERVER_FLOW_CALLBACK_URL: http://localhost:9044/v1/flows/{flow_instance_id}/{task_instance_id}/resume/async
      JWT_SECRET: ${JWT_SECRET}
      SERVER_INTERNAL_PROTOCOL: http
      SERVER_INTERNAL_HOSTNAME: wxo-tempus-runtime
      SERVER_INTERNAL_PORT: "9044"
      WATSONX_AI_AUTH_TYPE: iam
      WATSONX_AI_PROJECT_ID: ""
      WATSONX_AI_SPACE_ID: ${WATSONX_SPACE_ID}
      WATSONX_AI_APIKEY: ${WATSONX_APIKEY}
      WATSONX_AI_SERVICE_URL: ${WATSONX_URL}
      PG_HOST: wxo-server-db
      PG_PORT: "5432"
      PG_USER: ${POSTGRES_USER:-postgres}
      PG_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PG_DATABASE: ${POSTGRES_USER:-postgres}
      USER_MGMT_BASE_URL: "" # TODO
      WXO_SERVER_BASE_URL: http://wxo-server:4321
      TRM_SERVER_BASE_URL: http://tools-runtime-manager:8080
      CONNECTION_MANAGER_SERVER_BASE_URL: http://wxo-server-connection-manager:3001
      REDIS_ENDPOINT: wxo-server-redis:6379
      REDIS_USER:
      REDIS_PASSWORD:
      REDIS_TLS: false
      LANGFUSE_ENABLED: ${LANGFUSE_ENABLED:-false}
      LANGFUSE_HOST: ${LANGFUSE_HOST:-http://langfuse-web:3000}
      LANGFUSE_PUBLIC_KEY:  ${LANGFUSE_PUBLIC_KEY:-pk-lf-7417757e-d6df-421b-957e-683b76acb5df}
      LANGFUSE_SECRET_KEY:  ${LANGFUSE_PRIVATE_KEY:-sk-lf-7bc4da63-7b2b-40c0-b5eb-1e0cf64f9af2}
      LOG_LEVEL: info
      DISABLE_FLOW_BINDING: true
    healthcheck:
      test: curl -k http://localhost:9044/readiness --fail
      interval: 5s
      timeout: 60s
      retries: 5
    ports:
      - 9044:9044
    depends_on:
      - wxo-server-db
    
volumes:
  tools:
    driver: local
  wxo-server-redis-data:
    driver: local
  wxo-server-db:
    driver: local
  wxo-applied-migrations:
    driver: local
  wxo-server-minio-data:
    driver: local
  wxo-milvus-data:
    driver: local
  wxo-milvus-etcd-data:
    driver: local
  ui-data:
    driver: local
  tools-runtime-data:
    driver: local
  langfuse_clickhouse_data:
    driver: local
  langfuse_clickhouse_logs:
    driver: local
networks:
  default:
    name: wxo-server
    
